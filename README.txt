Name: Danielle DeLooze
Email: ddelooze@u.rochester.edu
Student ID: 29493487
Date: 4/29/2017
Project: Project 4

Description: This project is for Project 4 of CSC 172 taught by Ted Pawlicki. In this project we created our own Node, Vertex, and graph classes to represent our graphs. Then we needed to implement a shortest path algorithm, minimum weight spanning tree algorithm, and a method to show a map of the graph. To implement the shortest path algorithm I used a method of Dijkstra's algorithm. Until the end point was found, I found the shortest path to each node by fixing the distance of the nodes. For the minimum weight spanning tree, I used a form of Kruskal's algorithm. Adding the smallest edges possible (that did not form a cycle) until the number of edges was equal to the numVertices-1. To show the map I found the min and max lat and long then scaled each road in relation to that and the window size. I tried to optimize my graph implementation by storing the vertices in a hash-table. This changed the Big-O of searching for a specific vertex from BigO(n) to BigO(1).The Big-O for showing the map is equal to BigO(n) where n is the number of edges in the Arraylist of edges. This is because I map each edge individual. The Big-O for my shortest path algorithm is BigO(nm) where n is the number of nodes between the start and the finish and m is the number roads in each node. This the the most time intensive step of my algorithm because each road of each node that is visited needs to be checked to make sure the path doesn't get shorter. Big-O of the minimum weight spanning tree is BigO(nm * v) where n is number of vertices in my cycle check and m is the number of roads. v is the number of roads in my priortiy queue. 